{"ast":null,"code":"var _jsxFileName = \"/Users/lrod/projects/react/29222cab-69d6-4e98-a11b-c0e58d67d7a1/src/App.js\";\nimport React, { useRef, useState } from \"react\";\nimport EmptyStar from \"./assets/empty-star.svg\";\nimport FilledStar from \"./assets/filled-star.svg\";\nimport \"./styles.css\";\n\nconst RatingSystem = () => {\n  // since the rating is never rendered we can use useRef to avoid unnessary re-renders.\n  const rating = useRef(0); // state of stars\n  // using a array to map over stars and assign them an index\n\n  const [starState, setStarState] = useState([\"empty\", \"empty\", \"empty\", \"empty\", \"empty\"]);\n\n  const setRating = index => {\n    // the rating is always one more than the index\n    rating.current = index + 1; // replace empty stars from the start start state array index of star that is clicked on\n    // for (let i = 0; i < rating; i++) {\n\n    setStarState(starState.splice(0, index, index, \"filled\")); // }\n\n    console.log(starState);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, \"5 star rating system\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Select a rating:\"), starState.map((star, index) => {\n    return star === \"empty\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: EmptyStar,\n      alt: \"empty star\",\n      key: index,\n      onClick: () => setRating(index)\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: FilledStar,\n      alt: \"empty star\",\n      key: index,\n      onClick: () => setRating(index)\n    });\n  }));\n};\n\nexport default function App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\"\n  }, /*#__PURE__*/React.createElement(RatingSystem, null));\n}","map":{"version":3,"sources":["/Users/lrod/projects/react/29222cab-69d6-4e98-a11b-c0e58d67d7a1/src/App.js"],"names":["React","useRef","useState","RatingSystem","rating","starState","setStarState","setRating","index","current","splice","console","log","map","star","EmptyStar","FilledStar","App"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;;;AAGA,OAAO,cAAP;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB;AACA,QAAMC,MAAM,GAAGH,MAAM,CAAC,CAAD,CAArB,CAFyB,CAIzB;AACA;;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,CACzC,OADyC,EAEzC,OAFyC,EAGzC,OAHyC,EAIzC,OAJyC,EAKzC,OALyC,CAAD,CAA1C;;AAQA,QAAMK,SAAS,GAAIC,KAAD,IAAW;AAC3B;AACAJ,IAAAA,MAAM,CAACK,OAAP,GAAiBD,KAAK,GAAG,CAAzB,CAF2B,CAI3B;AACA;;AACAF,IAAAA,YAAY,CAACD,SAAS,CAACK,MAAV,CAAiB,CAAjB,EAAoBF,KAApB,EAA2BA,KAA3B,EAAkC,QAAlC,CAAD,CAAZ,CAN2B,CAO3B;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACD,GATD;;AAWA,sBACE,8CACE,uDADF,eAEE,mDAFF,EAGGA,SAAS,CAACQ,GAAV,CAAc,CAACC,IAAD,EAAON,KAAP,KAAiB;AAC9B,WAAOM,IAAI,KAAK,OAAT,gBACL;AACE,MAAA,GAAG,EAAEC,SADP;AAEE,MAAA,GAAG,EAAC,YAFN;AAGE,MAAA,GAAG,EAAEP,KAHP;AAIE,MAAA,OAAO,EAAE,MAAMD,SAAS,CAACC,KAAD;AAJ1B,MADK,gBAQL;AACE,MAAA,GAAG,EAAEQ,UADP;AAEE,MAAA,GAAG,EAAC,YAFN;AAGE,MAAA,GAAG,EAAER,KAHP;AAIE,MAAA,OAAO,EAAE,MAAMD,SAAS,CAACC,KAAD;AAJ1B,MARF;AAeD,GAhBA,CAHH,CADF;AAuBD,CAhDD;;AAkDA,eAAe,SAASS,GAAT,GAAe;AAC5B,sBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,YAAD,OADF,CADF;AAKD","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport EmptyStar from \"./assets/empty-star.svg\";\nimport FilledStar from \"./assets/filled-star.svg\";\nimport \"./styles.css\";\n\nconst RatingSystem = () => {\n  // since the rating is never rendered we can use useRef to avoid unnessary re-renders.\n  const rating = useRef(0);\n\n  // state of stars\n  // using a array to map over stars and assign them an index\n  const [starState, setStarState] = useState([\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n    \"empty\",\n  ]);\n\n  const setRating = (index) => {\n    // the rating is always one more than the index\n    rating.current = index + 1;\n\n    // replace empty stars from the start start state array index of star that is clicked on\n    // for (let i = 0; i < rating; i++) {\n    setStarState(starState.splice(0, index, index, \"filled\"));\n    // }\n    console.log(starState);\n  };\n\n  return (\n    <div>\n      <h1>5 star rating system</h1>\n      <h2>Select a rating:</h2>\n      {starState.map((star, index) => {\n        return star === \"empty\" ? (\n          <img\n            src={EmptyStar}\n            alt=\"empty star\"\n            key={index}\n            onClick={() => setRating(index)}\n          />\n        ) : (\n          <img\n            src={FilledStar}\n            alt=\"empty star\"\n            key={index}\n            onClick={() => setRating(index)}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <RatingSystem />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}